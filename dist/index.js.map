{
  "version": 3,
  "sources": ["../lib/tribonaccif.json", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["[0,0,1,1,2,4,7,13,24,44,81,149,274,504,927,1705,3136,5768,10609,19513,35890,66012,121415,223317,410744,755476,1389537,2555757,4700770,8646064,15902591]\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isNonnegativeIntegerf = require( '@stdlib/math-base-assert-is-nonnegative-integerf' );\nvar FLOAT32_MAX_SAFE_NTH_TRIBONACCI = require( '@stdlib/constants-float32-max-safe-nth-tribonacci' ); // eslint-disable-line id-length\nvar TRIBONACCIF = require( './tribonaccif.json' );\n\n\n// MAIN //\n\n/**\n* Computes the nth Tribonacci number as a single-precision floating-point number.\n*\n* @param {NonNegativeInteger} n - the Tribonacci number to compute\n* @returns {NonNegativeInteger} Tribonacci number\n*\n* @example\n* var y = tribonaccif( 0 );\n* // returns 0\n*\n* @example\n* var y = tribonaccif( 1 );\n* // returns 0\n*\n* @example\n* var y = tribonaccif( 2 );\n* // returns 1\n*\n* @example\n* var y = tribonaccif( 3 );\n* // returns 1\n*\n* @example\n* var y = tribonaccif( 4 );\n* // returns 2\n*\n* @example\n* var y = tribonaccif( 5 );\n* // returns 4\n*\n* @example\n* var y = tribonaccif( 6 );\n* // returns 7\n*\n* @example\n* var y = tribonaccif( NaN );\n* // returns NaN\n*\n* @example\n* var y = tribonaccif( 3.14 );\n* // returns NaN\n*\n* @example\n* var y = tribonaccif( -1.0 );\n* // returns NaN\n*/\nfunction tribonaccif( n ) {\n\tif (\n\t\tisnanf( n ) ||\n\t\t!isNonnegativeIntegerf( n ) ||\n\t\tn > FLOAT32_MAX_SAFE_NTH_TRIBONACCI\n\t) {\n\t\treturn NaN;\n\t}\n\treturn TRIBONACCIF[ n ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = tribonaccif;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the nth Tribonacci number as a single-precision floating-point number.\n*\n* @module @stdlib/math-base-special-tribonaccif\n*\n* @example\n* var tribonaccif = require( '@stdlib/math-base-special-tribonaccif' );\n*\n* var y = tribonaccif( 0 );\n* // returns 0\n*\n* y = tribonaccif( 1 );\n* // returns 0\n*\n* y = tribonaccif( 2 );\n* // returns 1\n*\n* y = tribonaccif( 3 );\n* // returns 1\n*\n* y = tribonaccif( 4 );\n* // returns 2\n*\n* y = tribonaccif( 5 );\n* // returns 4\n*\n* y = tribonaccif( 6 );\n* // returns 7\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,CAAAA,EAAA,SAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,MAAM,MAAM,MAAM,MAAM,OAAO,OAAO,OAAO,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,ICAtJ,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAwB,QAAS,kDAAmD,EACpFC,EAAkC,QAAS,mDAAoD,EAC/FC,EAAc,IAmDlB,SAASC,EAAaC,EAAI,CACzB,OACCL,EAAQK,CAAE,GACV,CAACJ,EAAuBI,CAAE,GAC1BA,EAAIH,EAEG,IAEDC,EAAaE,CAAE,CACvB,CAKAN,EAAO,QAAUK,ICtCjB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_tribonaccif", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "isnanf", "isNonnegativeIntegerf", "FLOAT32_MAX_SAFE_NTH_TRIBONACCI", "TRIBONACCIF", "tribonaccif", "n", "main"]
}
