{"version":3,"file":"index.js","sources":["../node_modules/@stdlib/math-base-special-floorf/lib/main.js","../lib/main.js","../node_modules/@stdlib/math-base-assert-is-nanf/lib/main.js","../node_modules/@stdlib/math-base-assert-is-nonnegative-integerf/lib/main.js","../node_modules/@stdlib/constants-float32-max-safe-nth-tribonacci/lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// TODO: implementation (?)\n\n/**\n* Rounds a single-precision floating-point number toward negative infinity.\n*\n* @param {number} x - input value\n* @returns {number} rounded value\n*\n* @example\n* var v = floorf( -4.2 );\n* // returns -5.0\n*\n* @example\n* var v = floorf( 9.99999 );\n* // returns 9.0\n*\n* @example\n* var v = floorf( 0.0 );\n* // returns 0.0\n*\n* @example\n* var v = floorf( NaN );\n* // returns NaN\n*/\nvar floorf = Math.floor; // eslint-disable-line stdlib/no-builtin-math\n\n\n// EXPORTS //\n\nexport default floorf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport isNonnegativeIntegerf from '@stdlib/math-base-assert-is-nonnegative-integerf';\nimport FLOAT32_MAX_SAFE_NTH_TRIBONACCI from '@stdlib/constants-float32-max-safe-nth-tribonacci'; // eslint-disable-line id-length\nimport TRIBONACCIF from './tribonaccif.json';\n\n\n// MAIN //\n\n/**\n* Computes the nth Tribonacci number as a single-precision floating-point number.\n*\n* @param {NonNegativeInteger} n - the Tribonacci number to compute\n* @returns {NonNegativeInteger} Tribonacci number\n*\n* @example\n* var y = tribonaccif( 0 );\n* // returns 0\n*\n* @example\n* var y = tribonaccif( 1 );\n* // returns 0\n*\n* @example\n* var y = tribonaccif( 2 );\n* // returns 1\n*\n* @example\n* var y = tribonaccif( 3 );\n* // returns 1\n*\n* @example\n* var y = tribonaccif( 4 );\n* // returns 2\n*\n* @example\n* var y = tribonaccif( 5 );\n* // returns 4\n*\n* @example\n* var y = tribonaccif( 6 );\n* // returns 7\n*\n* @example\n* var y = tribonaccif( NaN );\n* // returns NaN\n*\n* @example\n* var y = tribonaccif( 3.14 );\n* // returns NaN\n*\n* @example\n* var y = tribonaccif( -1.0 );\n* // returns NaN\n*/\nfunction tribonaccif( n ) {\n\tif (\n\t\tisnanf( n ) ||\n\t\t!isNonnegativeIntegerf( n ) ||\n\t\tn > FLOAT32_MAX_SAFE_NTH_TRIBONACCI\n\t) {\n\t\treturn NaN;\n\t}\n\treturn TRIBONACCIF[ n ];\n}\n\n\n// EXPORTS //\n\nexport default tribonaccif;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Tests if a single-precision floating-point numeric value is `NaN`.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is `NaN`\n*\n* @example\n* var bool = isnanf( NaN );\n* // returns true\n*\n* @example\n* var bool = isnanf( 7.0 );\n* // returns false\n*/\nfunction isnanf( x ) {\n\treturn ( x !== x );\n}\n\n\n// EXPORTS //\n\nexport default isnanf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floorf from '@stdlib/math-base-special-floorf';\n\n\n// MAIN //\n\n/**\n* Tests if a finite single-precision floating-point number is a nonnegative integer.\n*\n* @param {number} x - value to test\n* @returns {boolean} boolean indicating whether the value is a nonnegative integer\n*\n* @example\n* var bool = isNonNegativeIntegerf( 1.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeIntegerf( 0.0 );\n* // returns true\n*\n* @example\n* var bool = isNonNegativeIntegerf( -10.0 );\n* // returns false\n*/\nfunction isNonNegativeIntegerf( x ) {\n\treturn ( floorf( x ) === x && x >= 0 );\n}\n\n\n// EXPORTS //\n\nexport default isNonNegativeIntegerf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Maximum safe nth Tribonacci number when stored in single-precision floating-point format.\n*\n* @module @stdlib/constants-float32-max-safe-nth-tribonacci\n* @type {integer}\n*\n* @example\n* import FLOAT32_MAX_SAFE_NTH_TRIBONACCI from '@stdlib/constants-float32-max-safe-nth-tribonacci';\n* // returns 30\n*/\n\n\n// MAIN //\n\n/**\n* Maximum safe nth Tribonacci number when stored in single-precision floating-point format.\n*\n* @constant\n* @type {integer}\n* @default 30\n* @see [Tribonacci number]{@link https://en.wikipedia.org/wiki/Tribonacci_number}\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT32_MAX_SAFE_NTH_TRIBONACCI = 30|0; // eslint-disable-line id-length\n\n\n// EXPORTS //\n\nexport default FLOAT32_MAX_SAFE_NTH_TRIBONACCI;\n"],"names":["floorf","Math","floor","n","x","isNonnegativeIntegerf","NaN","TRIBONACCIF"],"mappings":";yCA4CA,IAAIA,EAASC,KAAKC,uKCgClB,SAAsBC,GACrB,OCzCgBC,ED0CPD,ICzCMC,ICQhB,SAAgCA,GAC/B,OAASJ,EAAQI,KAAQA,GAAKA,GAAK,CACpC,CFgCGC,CAAuBF,IACxBA,EGrCoC,GHuC7BG,IAEDC,EAAaJ,GChDrB,IAAiBC,CDiDjB","x_google_ignoreList":[0,2,3,4]}